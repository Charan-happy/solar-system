name: solar-system workflow

on:
    workflow_dispatch: 
    push:
        branches: 
          - main
          - '!feature/*'
env:
    MONGO_URI: 'mongodb+srv://supercluster.d83jj.mongodb.net/superData'
    MONGO_USERNAME: ${{ vars.MONGO_USERNAME }}
    MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}
jobs:
    unit-testing:
        name: Unit Testing
        services:
          mongodb:
            image: siddharth67/mongo-db:non-prod
            ports:
              - 2701:3000
        env:
            MONGO_URI: 'mongodb://localhost/superData'
            MONGO_USERNAME: non-prod-user
            MONGO_PASSWORD: non-prod-password
        strategy:
          matrix:
              nodejs_version: [18, 20]
              operating_system: [ubuntu-latest]
              exclude:
                  - nodejs_version: 18
                    operating_system: macos-latest     
        runs-on: ${{ matrix.operating_system }}
        steps:
        - name: Checkout Repository
          uses: actions/checkout@v4

        - name: Setup Nodejs Version - ${{ matrix.nodejs_version }} 
          uses: actions/setup-node@v3
          with:
            node-version: ${{ matrix.nodejs_version }}

        - name: Cache npm dependencies
          uses: actions/cache@v3
          with:
            path: node_modules
            key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}
        
        - name: Install Dependencies
          run: npm install

        - name: Unit Testing
          run: npm test

        - name: Archive Test Result
          uses: actions/upload-artifact@v3
          with:
            name: mocha-test-result
            path: test-results.xml
    
    code-coverage:
        name: Code-coverage
        container: 
          image: node:18
        services:
          mongodb:
            image: siddharth67/mongo-db:non-prod
            options: 
                --name mongo
        env:
            MONGO_URI: 'mongodb://mongo:3000/superData'
            MONGO_USERNAME: non-prod-user
            MONGO_PASSWORD: non-prod-password
        runs-on: ubuntu-latest
        steps:
        - name: Checkout Repository
          uses: actions/checkout@v4

       # - name: Setup Nodejs Version - 18
        #  uses: actions/setup-node@v3
         # with:
          #  node-version: 18
        
        - name: Cache npm dependencies
          uses: actions/cache@v3
          with:
            path: node_modules
            key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}

        - name: Install Dependencies
          run: npm install
        
        - name: check Code Coverage
          run: npm run coverage
          continue-on-error: true
        
        - name: Archive Test Result
          if: always()
          uses: actions/upload-artifact@v3
          with:
            name: Code-Coverage-Result
            path: coverage
            retention-days: 5
        
    docker:
        name: Containerization
        needs: [unit-testing, code-coverage]
        permissions: 
          packages: write
        runs-on: ubuntu-latest
        steps:
        - name: checkout
          uses: actions/checkout@v4

        - name: Dockerhub Login
          uses: docker/login-action@v2.2.0
          with:
            username: ${{ vars.Dockerhub_USERNAME }}
            password: ${{ secrets.Dockerhub_PASSWORD }}

        - name: GHCR Login
          uses: docker/login-action@v2.2.0
          with:
            registry: ghcr.io
            username: ${{ github.repository_owner }}
            password: ${{ secrets.GITHUB_TOKEN }}

        - name: Docker Build For Testing
          uses: docker/build-push-action@v4
          with:
            context: .
            push: false
            tags: ${{ vars.Dockerhub_USERNAME }}/solar-system:${{ github.sha }}

        - name: Docker Image Testing
          run: |
            docker images
            docker run --name solar-system-app -d \
                -p 3000:3000 \
                -e MONGO_URI=$MONGO_URI \
                -e MONGO_USERNAME=$MONGO_USERNAME \
                -e MONGO_PASSWORD=$MONGO_PASSWORD \
                ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}

                export IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' solar-system-app)
                echo $IP

                echo Testing Image URL using wget
                wget -q -O - 127.0.0.1:3000/live | grep live

        - name: Container Registry Push
          uses: docker/build-push-action@v4
          with:
            context: .
            push: true
            tags: |
                ${{ vars.Dockerhub_USERNAME }}/solar-system:${{ github.sha }}
                ghcr.io/${{ github.repository_owner }}/solar-system:${{ github.sha }}
                

    dev-deploy:
      needs: docker
      runs-on: ubuntu-latest
      steps:
        - name: Checkout Repository
          uses: actions/checkout@v4

        - name: Install Kubectl
          uses: azure/setup-kubectl@v3
          with:
            version: 'v1.26.0'
        
        - name: set kubeconfig file
          uses: azure/k8s-set-context@v3
          with:
            method: kubeconfig
            kubeconfig: ${{ secrets.KUBECONFIG }}

        - name: Fetch Kubernetes cluster Details
          run: |
            kubectl version --short 
            echo --------------------------------------------
            kubectl get nodes

        - name: Saving Nginx Controller as a GITHUB Environment Variable
          run: |
            echo "INGRESS_IP=$(kubectl -n ingress-nginx get services ingress-nginx-controller -o jsonpath="{.status.loadbalancer.ingress[0]}")" >> $GITHUB_ENV
      
        - name: Replace Tokens in Manifest Files
          uses: cschleiden/replace-tokens@v1
          with: 
            tokenprefix: '_{_}'
            tokensuffix: '_}_'
            files: '["kubernetes/development/*.yaml"]'
          env:
            NAMESPACE: ${{ vars.NAMESPACE }}
            REPLICAS: ${{ vars.REPLICAS }}
            IMAGE: ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}
            INGRESS_IP: ${{ env.INGRESS_IP }}
        
        - name: Check Files
          run: |
            cat kubernetes/development/*.yaml 

        - name: Create MongoDB Secret
          run: |
            kubectl -n ${{ vars.NAMESPACE }} create secret generic mongo-db-creds \
            --from-literal=MONGO_URI=${{ env.MONGO_URI }}
            --from-literal=MONGO_USERNAME=${{ vars.MONGO_USERNAME }}
            --from-literal=MONGO_PASSWORD=${{ secrets.MONGO_PASSWORD }}
            --save-config \
            --dry-run=client \
            -o yaml | kubectl apply -f .

    
        - name: Deploy to Dev Env
          run: |
            kubectl -f kubernetes/development




    